             ---*UTPL*-----
Programacion funcional y Reactiva
Alumno: Jean Gabriel Alejo
//Semana 6
  

 //Tuplas
  //Definicion
    val par =(1, "Abad Ana")
	
    println(par._1)
	println(par._2)
	
	
   //Â¿Como declarar su tipo?
   
   val student =(1,"Abad Ana")                   val student: Tuple2[Int,String}
   val datos = ("jorgaf", 'M',45,95.2,true)      val datos: Tuple5[String, Char,Int,Double, Boolean]
   
   //Algunas funciones
   
     val student = (1, "Abad Ana")
     val (edad, nombre) = student           student.swap 
     print(edad)
     print(nombre)
	 
	 student.canEqual(1,"Abad Ana")


// Estructuraa de datos funcionales 
  //Listas
    //Declaraciones 
        
       val values = List(42,31,36,40,43)
       
       val names = List("Jorge","Rene","Ma. Del Carmen","Nelson")

      
       val fruit : List[String] = List("apple", "orange", "pears")
               [Int] = List(1,2,3,4)


    //Operaciones
            
           val myList = List(10,20,30,40,50,60)
           myList.isEmpty
           myList.drop(2)
           myList.dropWhile(_ < 25)
           myList.slice(2,4)
           myList.tail
           myList.take(3)
           myList.takeWhile(_ < 30)
           myList.sorted
           myList.sorted(Ordering.Int.reverse)
		   
   // Otras operaciones
      //foldLeft: 
	         myList.foldLeft(0) (x, y) => z + y)
			 myList.foldLeft(0) (_+_)
			 
	  //foldRight
            myList.foldRight(0) ( (x, y) => x + y)
       		myList.foldRight(0) (_+_)


   //foldLeft ejemplo
     /* Crear una funcion para calcular el promedio de los elementos de una lista de numeros reales
	 /*
	 
	 def average(valores:Seq[Double]) : Double = {
	   val t = valores.foldLeft((0.0,0))((acc, currVal) => (acc._1 + currVal, acc._2 + 1))
	   t._1 / t._2
}
	   
     def average2(valores:Seq[Double}) : Double = {
	    val t = valores.foldLeft((0.0,0))) { (acc,currVal) =>
		  val sum = acc._1 + currVal
		  val cont = acc._2 + 1
		  printf("suma: %f - contador: %d%n", sum,cont) 
		    (sum,cont)
	 }
     t._1 / t._2
}
	 //Listas
	  //Otras operaciones
	    //Zip
		  val myList = List(10.20,30,40,50,60)
		  val names = List("Guido", "Armando", "Patricio","Manuel", "Germania", "Fanny")
		  names.zip(myList)
		  
		//Unzip  
           val zippedList: List(String, Int)] =
             List(("Guido",10),("Armando",20),("Patricio,30),("Manuel",40),("Germania",50),("Fanny",60))

           val unzippedLists: (List[String], List[Int]) = zippedList.unzip

           unzippedList._1
           unzippedList._2		   
		  
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
  


 

